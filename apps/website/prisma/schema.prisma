// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "mysql"
  relationMode      = "prisma"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ClientAccessToken {
  service       String
  client_id     String
  access_token  String
  refresh_token String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  expiresAt     DateTime?

  @@unique([service, client_id])
}

model TaskExecutionEvent {
  id         String    @id @default(cuid())
  task       String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?

  @@index([task], name: "TaskExecutionEvent_task")
  @@index([startedAt], name: "TaskExecutionEvent_startedAt")
  @@index([task, startedAt], name: "TaskExecutionEvent_task_startedAt")
}

model ChannelUpdateEvent {
  id            String   @id @default(cuid())
  service       String
  channel       String
  title         String
  category_id   String
  category_name String
  source        String
  createdAt     DateTime @default(now())
}

model StreamStatusEvent {
  id        String    @id @default(cuid())
  service   String
  channel   String
  online    Boolean
  source    String
  createdAt DateTime  @default(now())
  startedAt DateTime?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  twitchChannelBroadcaster TwitchChannel[] @relation("BroadcasterAccount")
  twitchChannelModerator   TwitchChannel[] @relation("ModeratorAccount")

  @@unique([provider, providerAccountId])
  @@index([userId], name: "Account_userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "Session_userId")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  pushSubscriptions  PushSubscription[]
  notificationPushes NotificationPush[]
  formEntries        FormEntry[]
  bingoEntries       BingoEntry[]
  outgoingWebhooks   OutgoingWebhook[]
  showAndTellEntries ShowAndTellEntry[]
  roles              UserRole[]
  virtualTickets     VirtualTicket[]

  @@index([name], name: "User_name")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

enum NotificationUrgency {
  VERY_LOW
  LOW
  NORMAL
  HIGH
}

model Notification {
  id               String              @id @default(cuid())
  message          String
  createdAt        DateTime            @default(now())
  expiresAt        DateTime
  canceledAt       DateTime?
  scheduledStartAt DateTime?
  scheduledEndAt   DateTime?
  title            String?
  linkUrl          String?
  imageUrl         String?
  tag              String?
  urgency          NotificationUrgency @default(NORMAL)
  isPush           Boolean             @default(false)
  isDiscord        Boolean             @default(false)

  pushes                            NotificationPush[]
  NotificationDiscordChannelWebhook NotificationDiscordChannelWebhook[]

  @@index([canceledAt, createdAt], name: "Notification_recent")
}

enum NotificationPushProcessingStatus {
  PENDING
  IN_PROGRESS
  DONE
}

model NotificationPush {
  notificationId   String
  subscriptionId   String
  userId           String?
  processingStatus NotificationPushProcessingStatus @default(PENDING)
  attempts         Int?
  createdAt        DateTime                         @default(now())
  expiresAt        DateTime
  clickedAt        DateTime?
  failedAt         DateTime?
  deliveredAt      DateTime?
  user             User?                            @relation(fields: [userId], references: [id])
  notification     Notification                     @relation(fields: [notificationId], references: [id])
  subscription     PushSubscription                 @relation(fields: [subscriptionId], references: [id])

  @@unique([notificationId, subscriptionId])
  @@index([userId], name: "NotificationPush_userId")
  @@index([processingStatus], name: "NotificationPush_processingStatus")
  @@index([subscriptionId], name: "NotificationPush_subscriptionId")
}

// FIXME: Endpoint URLs could be up to 2048 chars, which would be 8192 bytes with utf8mb4 (4 bytes per char),
//        but innodb unique index keys may only be up to 3072 bytes which would be 768 characters so we round
//        down to 720. So far Endpoint URLS have been less than 256 chars. So that _should_ not collide.
model PushSubscription {
  id        String                @id @default(cuid())
  userId    String?
  endpoint  String                @db.VarChar(720) // ^ see FIXME above
  p256dh    String?
  auth      String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  deletedAt DateTime?
  user      User?                 @relation(fields: [userId], references: [id])
  tags      PushSubscriptionTag[]
  pushes    NotificationPush[]

  @@unique([endpoint])
  @@index([userId], name: "PushSubscription_userId")
}

model PushSubscriptionTag {
  subscriptionId String
  name           String
  value          String
  subscription   PushSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, name])
}

model NotificationDiscordChannelWebhook {
  notificationId    String
  outgoingWebhookId String

  notification    Notification    @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  outgoingWebhook OutgoingWebhook @relation(fields: [outgoingWebhookId], references: [id], onDelete: Cascade)

  @@unique([notificationId, outgoingWebhookId])
  @@unique([outgoingWebhookId])
}

model MailingAddress {
  id           String @id @default(cuid())
  country      String
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  postalCode   String
  salt         String @db.Char(32)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  formEntry FormEntry?
}

model Form {
  id                 String    @id @default(cuid())
  label              String
  slug               String?
  active             Boolean   @default(false)
  startAt            DateTime  @default(now())
  endAt              DateTime?
  outgoingWebhookUrl String?   @db.VarChar(720)
  showInLists        Boolean   @default(true)
  config             String    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries FormEntry[]

  @@unique([slug])
  @@index([active, startAt, endAt, id, slug], name: "Form_public")
}

model FormEntry {
  id                   String  @id @default(cuid())
  formId               String
  userId               String
  mailingAddressId     String? @unique
  outgoingWebhookId    String? @unique
  email                String?
  givenName            String
  familyName           String
  allowMarketingEmails Boolean @default(false)
  salt                 String  @db.Char(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form            Form             @relation(fields: [formId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  mailingAddress  MailingAddress?  @relation(fields: [mailingAddressId], references: [id])
  outgoingWebhook OutgoingWebhook? @relation(fields: [outgoingWebhookId], references: [id])

  @@unique([formId, userId])
  @@index([userId], name: "FormEntry_userId")
}

model ShortLinks {
  id    String @id @default(cuid())
  label String
  slug  String @unique
  link  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShortLinksTracking {
  id     String @id @default(cuid())
  clicks Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  link        String
  startAt     DateTime
  hasTime     Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startAt], name: "CalendarEvent_start")
}

model Bingo {
  id                 String    @id @default(cuid())
  type               String
  label              String
  slug               String?
  active             Boolean   @default(false)
  startAt            DateTime  @default(now())
  endAt              DateTime?
  outgoingWebhookUrl String?   @db.VarChar(720)
  showInLists        Boolean   @default(true)
  config             String    @db.MediumText
  playData           String    @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries BingoEntry[]

  @@unique([slug])
}

model BingoEntry {
  id                String  @id @default(cuid())
  userId            String
  bingoId           String
  permutation       Int
  outgoingWebhookId String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  claimedAt DateTime?

  bingo           Bingo            @relation(fields: [bingoId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  outgoingWebhook OutgoingWebhook? @relation(fields: [outgoingWebhookId], references: [id])

  @@unique([bingoId, userId])
  @@index([userId], name: "BingoEntry_userId")
}

model OutgoingWebhook {
  id          String    @id @default(cuid())
  type        String
  url         String    @db.VarChar(720)
  body        String    @db.Text
  userId      String?
  retry       Boolean   @default(false)
  attempts    Int?
  createdAt   DateTime  @default(now())
  failedAt    DateTime?
  deliveredAt DateTime?
  expiresAt   DateTime?

  user         User?                              @relation(fields: [userId], references: [id])
  formEntry    FormEntry?
  notification NotificationDiscordChannelWebhook?
  BingoEntry   BingoEntry?

  @@index([userId], name: "OutgoingWebhook_userId")
}

model LinkAttachment {
  id              String @id @default(cuid())
  type            String
  name            String
  title           String
  alternativeText String
  caption         String
  description     String
  url             String

  showAndTellEntryAttachment ShowAndTellEntryAttachment?
}

model ShowAndTellEntry {
  id                  String    @id @default(cuid())
  userId              String?
  title               String
  text                String    @db.Text
  displayName         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  approvedAt          DateTime?
  seenOnStreamAt      DateTime?
  seenOnStream        Boolean   @default(false)
  volunteeringMinutes Int?
  location            String?
  longitude           Float?
  latitude            Float?

  attachments ShowAndTellEntryAttachment[]
  user        User?                        @relation(fields: [userId], references: [id])

  @@index([userId], name: "ShowAndTellEntry_userId")
  @@index([createdAt, approvedAt, updatedAt], name: "ShowAndTellEntry_approvedAndCreatedAt")
  @@index([seenOnStream, approvedAt, updatedAt], name: "ShowAndTellEntry_public")
}

model ShowAndTellEntryAttachment {
  id                String  @id @default(cuid())
  entryId           String
  attachmentType    String
  linkAttachmentId  String? @unique
  imageAttachmentId String? @unique

  entry           ShowAndTellEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  linkAttachment  LinkAttachment?  @relation(fields: [linkAttachmentId], references: [id], onDelete: Cascade)
  imageAttachment ImageAttachment? @relation(fields: [imageAttachmentId], references: [id], onDelete: Cascade)

  @@index([entryId], name: "ShowAndTellEntryAttachment_entryId")
}

model FileStorageObject {
  id         String    @id @default(cuid())
  key        String    @unique
  name       String
  type       String
  prefix     String
  acl        String
  createdAt  DateTime  @default(now())
  uploadedAt DateTime?
  deletedAt  DateTime?
  expiresAt  DateTime?

  imageAttachment ImageAttachment?
  imageMetadata   ImageMetadata?

  @@index([expiresAt, deletedAt], name: "FileStorageObject_cleanup")
  @@index([expiresAt], name: "FileStorageObject_expiresAt")
}

model ImageMetadata {
  mimeType            String
  width               Int
  height              Int
  fileStorageObjectId String @unique

  fileStorageObject FileStorageObject @relation(fields: [fileStorageObjectId], references: [id])
}

model ImageAttachment {
  id                  String @id @default(cuid())
  name                String @db.VarChar(200)
  title               String @db.VarChar(200)
  alternativeText     String @db.VarChar(300)
  caption             String @db.VarChar(200)
  description         String @db.VarChar(200)
  url                 String @db.VarChar(200)
  fileStorageObjectId String @unique

  fileStorageObject          FileStorageObject           @relation(fields: [fileStorageObjectId], references: [id], onDelete: Cascade)
  showAndTellEntryAttachment ShowAndTellEntryAttachment?
}

model TwitchChannel {
  channelId            String  @id
  username             String
  label                String
  broadcasterAccountId String?
  moderatorAccountId   String?

  broadcasterAccount Account? @relation(name: "BroadcasterAccount", fields: [broadcasterAccountId], references: [id])
  moderatorAccount   Account? @relation(name: "ModeratorAccount", fields: [moderatorAccountId], references: [id])
}

model VirtualTicket {
  userId        String
  eventId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  customization String   @db.Text

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@index([eventId], name: "VirtualTicket_eventId")
}
